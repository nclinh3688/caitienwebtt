// üöÄ SI√äU H·ªÜ TH·ªêNG H·ªåC NG√îN NG·ªÆ - Language Learning Platform Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// üë§ User Management v·ªõi Learning Profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Learning Preferences
  nativeLanguage    String   @default("vi") // Vietnamese default
  targetLanguages   String   @default("en") // Comma-separated languages learning
  learningGoal      LearningGoal @default(GENERAL)
  dailyGoalMinutes  Int      @default(30)
  preferredTime     String?  // "morning", "afternoon", "evening"
  
  // Gamification Profile
  totalXP           Int      @default(0)
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  level             Int      @default(1)
  gems              Int      @default(0)
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  enrollments       Enrollment[]
  progress          LessonProgress[]
  vocabularyProgress VocabularyProgress[]
  achievements      UserAchievement[]
  streakHistory     StreakHistory[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// üìö Course System - Powerful Language Courses
model Course {
  id              String    @id @default(cuid())
  language        String    // "en", "ja", "ko", "fr", etc.
  level           CourseLevel
  title           String
  description     String?
  thumbnail       String?
  estimatedHours  Int       @default(10)
  isPublished     Boolean   @default(false)
  order           Int       @default(0)
  color           String    @default("#3B82F6")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  units           Unit[]
  enrollments     Enrollment[]
  
  @@unique([language, level])
  @@map("courses")
}

// üìñ Unit System - Course Units
model Unit {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  order       Int      @default(0)
  color       String   @default("#10B981")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  
  @@map("units")
}

// üìù Lesson System - Interactive Lessons
model Lesson {
  id          String      @id @default(cuid())
  unitId      String
  title       String
  description String?
  type        LessonType  @default(VOCABULARY)
  content     String?     // JSON content for different lesson types
  xpReward    Int         @default(10)
  gemsReward  Int         @default(5)
  order       Int         @default(0)
  duration    Int         @default(5) // minutes
  isLocked    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  unit        Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  progress    LessonProgress[]
  vocabulary  LessonVocabulary[]
  
  @@map("lessons")
}

// üéØ Enrollment - User Course Enrollment
model Enrollment {
  id              String    @id @default(cuid())
  userId          String
  courseId        String
  enrolledAt      DateTime  @default(now())
  completedAt     DateTime?
  isCompleted     Boolean   @default(false)
  currentUnitId   String?
  currentLessonId String?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

// üìä Learning Progress Tracking
model LessonProgress {
  id              String    @id @default(cuid())
  userId          String
  lessonId        String
  status          ProgressStatus @default(NOT_STARTED)
  score           Float?    @default(0)
  attempts        Int       @default(0)
  timeSpent       Int       @default(0) // seconds
  completedAt     DateTime?
  lastAccessedAt  DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson          Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// üìö Vocabulary System
model Vocabulary {
  id              String    @id @default(cuid())
  word            String
  pronunciation   String?
  definition      String
  example         String?
  audioUrl        String?
  imageUrl        String?
  language        String
  difficulty      DifficultyLevel @default(BEGINNER)
  partOfSpeech    String?   // "noun", "verb", "adjective", etc.
  tags            String?   // "common,business,travel" - comma separated
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  lessons         LessonVocabulary[]
  userProgress    VocabularyProgress[]
  
  @@unique([word, language])
  @@map("vocabulary")
}

// üîó Lesson-Vocabulary Relationship
model LessonVocabulary {
  id           String      @id @default(cuid())
  lessonId     String
  vocabularyId String
  
  lesson       Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  vocabulary   Vocabulary  @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)
  
  @@unique([lessonId, vocabularyId])
  @@map("lesson_vocabulary")
}

// üß† Spaced Repetition System cho Vocabulary
model VocabularyProgress {
  id              String    @id @default(cuid())
  userId          String
  vocabularyId    String
  masteryLevel    Int       @default(0) // 0-5 scale
  correctCount    Int       @default(0)
  incorrectCount  Int       @default(0)
  lastReviewedAt  DateTime?
  nextReviewAt    DateTime  @default(now())
  easinessFactor  Float     @default(2.5) // SM-2 algorithm
  interval        Int       @default(1) // days
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabulary      Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, vocabularyId])
  @@map("vocabulary_progress")
}

// üèÜ Achievement System
model Achievement {
  id          String    @id @default(cuid())
  key         String    @unique // "first_lesson", "7_day_streak", etc.
  name        String
  description String
  icon        String    @default("üèÜ")
  xpReward    Int       @default(50)
  gemsReward  Int       @default(25)
  rarity      AchievementRarity @default(COMMON)
  createdAt   DateTime  @default(now())
  
  users       UserAchievement[]
  
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// üî• Streak Tracking System
model StreakHistory {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  xpEarned  Int      @default(0)
  lessonsCompleted Int @default(0)
  timeSpent Int      @default(0) // seconds
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, date])
  @@map("streak_history")
}

// üìä Enums
enum LearningGoal {
  GENERAL
  TRAVEL
  BUSINESS
  ACADEMIC
  CONVERSATION
  EXAM_PREP
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  NATIVE
}

enum LessonType {
  VOCABULARY
  GRAMMAR
  LISTENING
  SPEAKING
  READING
  WRITING
  CONVERSATION
  PRONUNCIATION
  QUIZ
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  MASTERED
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum AchievementRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

// Verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}