// This is your database schema for the most powerful financial management system!
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User management with powerful features
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User preferences and settings
  currency      String    @default("USD")
  timezone      String    @default("UTC")
  language      String    @default("en")
  theme         String    @default("light")
  
  // Financial profile
  monthlyIncome Decimal?  @db.Decimal(12, 2)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  categories    Category[]
  budgets       Budget[]
  goals         Goal[]
  notifications Notification[]
  financialAccounts FinancialAccount[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Financial Accounts (Bank, Credit Card, etc.)
model FinancialAccount {
  id            String    @id @default(cuid())
  userId        String
  name          String
  type          AccountType
  balance       Decimal   @default(0) @db.Decimal(12, 2)
  currency      String    @default("USD")
  institution   String?
  accountNumber String?
  isActive      Boolean   @default(true)
  color         String    @default("#3B82F6")
  icon          String    @default("ðŸ’³")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  
  @@map("financial_accounts")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  CASH
}

// Categories with powerful organization
model Category {
  id           String    @id @default(cuid())
  userId       String
  name         String
  type         TransactionType
  color        String    @default("#6B7280")
  icon         String    @default("ðŸ“‚")
  parentId     String?   
  isDefault    Boolean   @default(false)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]    @relation("CategoryHierarchy")
  transactions Transaction[]
  budgets      Budget[]
  
  @@map("categories")
}

// Powerful transaction system
model Transaction {
  id              String          @id @default(cuid())
  userId          String
  accountId       String
  categoryId      String?
  amount          Decimal         @db.Decimal(12, 2)
  type            TransactionType
  description     String
  notes           String?
  date            DateTime
  isRecurring     Boolean         @default(false)
  recurringRule   String?         // RRULE format for recurring transactions
  tags            String[]        // Array of tags for powerful filtering
  location        String?
  merchant        String?
  receiptUrl      String?
  isVerified      Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  account         FinancialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category        Category?       @relation(fields: [categoryId], references: [id])
  
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

// Advanced budgeting system
model Budget {
  id          String      @id @default(cuid())
  userId      String
  categoryId  String
  name        String
  amount      Decimal     @db.Decimal(12, 2)
  spent       Decimal     @default(0) @db.Decimal(12, 2)
  period      BudgetPeriod
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean     @default(true)
  alertAt     Int         @default(80) // Alert when 80% spent
  color       String      @default("#10B981")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("budgets")
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

// Financial goals system
model Goal {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  targetAmount  Decimal   @db.Decimal(12, 2)
  currentAmount Decimal   @default(0) @db.Decimal(12, 2)
  targetDate    DateTime?
  category      GoalCategory
  color         String    @default("#8B5CF6")
  icon          String    @default("ðŸŽ¯")
  isCompleted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("goals")
}

enum GoalCategory {
  EMERGENCY_FUND
  VACATION
  CAR
  HOUSE
  EDUCATION
  RETIREMENT
  DEBT_PAYOFF
  OTHER
}

// Notification system
model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  actionUrl String?
  metadata  String?          // JSON data for rich notifications
  createdAt DateTime         @default(now())
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationType {
  BUDGET_ALERT
  GOAL_MILESTONE
  BILL_REMINDER
  LOW_BALANCE
  UNUSUAL_SPENDING
  MONTHLY_REPORT
}

// Verification tokens for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}