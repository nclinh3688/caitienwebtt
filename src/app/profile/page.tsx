'use client';

import { useState } from 'react';
import { useSession } from 'next-auth/react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  FaUser, 
  FaEnvelope, 
  FaPhone, 
  FaMapMarkerAlt, 
  FaCamera,
  FaEdit,
  FaBook,
  FaBookmark,
  FaTrophy,
  FaStar,
  FaCog,
  FaRobot,
  FaChartLine,
  FaLightbulb,
  FaDownload,
  FaShare,
  FaGraduationCap,
  FaCalendarAlt,
  FaClock,
  FaCheckCircle
} from 'react-icons/fa';

export default function ProfilePage() {
  const { data: session, status } = useSession();
  const [activeTab, setActiveTab] = useState('basic');
  const [isEditing, setIsEditing] = useState(false);

  const profileData = {
    basic: {
      name: session?.user?.name || 'Nguy·ªÖn VƒÉn A',
      email: session?.user?.email || 'nguyenvana@email.com',
      phone: '0901234567',
      location: 'TP.HCM, Vi·ªát Nam',
      avatar: 'üë§',
      joinDate: '15/03/2024',
      lastActive: '2 gi·ªù tr∆∞·ªõc',
      bio: 'H·ªçc vi√™n chƒÉm ch·ªâ, ƒëam m√™ h·ªçc ngo·∫°i ng·ªØ v√† vƒÉn h√≥a Nh·∫≠t B·∫£n.'
    },
    learning: {
      enrolledCourses: [
        {
          id: 1,
          name: 'JLPT N5 C∆° b·∫£n',
          language: 'Ti·∫øng Nh·∫≠t',
          progress: 75,
          totalLessons: 20,
          completedLessons: 15,
          startDate: '01/03/2024',
          estimatedCompletion: '15/04/2024'
        },
        {
          id: 2,
          name: 'HSK 1 C∆° b·∫£n',
          language: 'Ti·∫øng Trung',
          progress: 45,
          totalLessons: 15,
          completedLessons: 7,
          startDate: '10/03/2024',
          estimatedCompletion: '25/04/2024'
        }
      ],
      savedLessons: [
        {
          id: 1,
          title: 'B√†i 3: Gia ƒë√¨nh',
          course: 'JLPT N5',
          savedDate: '2 ng√†y tr∆∞·ªõc',
          tags: ['Ng·ªØ ph√°p', 'T·ª´ v·ª±ng']
        },
        {
          id: 2,
          title: 'B√†i 5: C√¥ng vi·ªác',
          course: 'JLPT N5',
          savedDate: '1 tu·∫ßn tr∆∞·ªõc',
          tags: ['H·ªôi tho·∫°i', 'Luy·ªán nghe']
        },
        {
          id: 3,
          title: 'B√†i 2: Ch√†o h·ªèi',
          course: 'HSK 1',
          savedDate: '3 ng√†y tr∆∞·ªõc',
          tags: ['Ph√°t √¢m', 'Giao ti·∫øp']
        }
      ]
    },
    achievements: {
      certificates: [
        {
          id: 1,
          name: 'JLPT N5',
          status: 'ƒêang h·ªçc',
          progress: 75,
          issueDate: null,
          expiryDate: null
        },
        {
          id: 2,
          name: 'HSK 1',
          status: 'Ch∆∞a b·∫Øt ƒë·∫ßu',
          progress: 45,
          issueDate: null,
          expiryDate: null
        }
      ],
      scores: [
        {
          id: 1,
          testName: 'Mini Test - B√†i 1',
          score: 92,
          totalQuestions: 10,
          correctAnswers: 9,
          date: '10/03/2024'
        },
        {
          id: 2,
          testName: 'Full Test N5 - Nghe',
          score: 78,
          totalQuestions: 25,
          correctAnswers: 19,
          date: '08/03/2024'
        },
        {
          id: 3,
          testName: 'HSK 1 - T·ª´ v·ª±ng',
          score: 85,
          totalQuestions: 20,
          correctAnswers: 17,
          date: '05/03/2024'
        }
      ],
      badges: [
        {
          id: 1,
          name: 'H·ªçc vi√™n chƒÉm ch·ªâ',
          icon: 'üèÜ',
          description: 'Ho√†n th√†nh 10 b√†i h·ªçc ƒë·∫ßu ti√™n',
          earnedDate: '05/03/2024'
        },
        {
          id: 2,
          name: 'Ng∆∞·ªùi nghe gi·ªèi',
          icon: 'üéß',
          description: 'Luy·ªán nghe 5 gi·ªù li√™n ti·∫øp',
          earnedDate: '08/03/2024'
        },
        {
          id: 3,
          name: 'Master Kanji',
          icon: '‚úçÔ∏è',
          description: 'H·ªçc thu·ªôc 100 kanji c∆° b·∫£n',
          earnedDate: '12/03/2024'
        }
      ]
    },
    aiAnalysis: {
      learningBehavior: {
        studyTime: '45 ph√∫t/ng√†y',
        preferredTime: '19:00 - 21:00',
        weakAreas: ['Ng·ªØ ph√°p', 'Kanji'],
        strongAreas: ['T·ª´ v·ª±ng', 'Luy·ªán nghe'],
        learningStyle: 'Visual + Auditory'
      },
      recommendations: [
        {
          id: 1,
          type: 'study',
          message: 'T·∫≠p trung √¥n l·∫°i ng·ªØ ph√°p B√†i 3 ƒë·ªÉ c·∫£i thi·ªán ƒëi·ªÉm y·∫øu',
          priority: 'high'
        },
        {
          id: 2,
          type: 'practice',
          message: 'Th·ª≠ l√†m th√™m b√†i test nghe ƒë·ªÉ ph√°t huy th·∫ø m·∫°nh',
          priority: 'medium'
        },
        {
          id: 3,
          type: 'schedule',
          message: 'H·ªçc v√†o bu·ªïi t·ªëi 19:00-21:00 s·∫Ω hi·ªáu qu·∫£ h∆°n',
          priority: 'low'
        }
      ],
      portfolio: {
        totalStudyHours: 45,
        completedLessons: 22,
        averageScore: 85,
        currentStreak: 7,
        totalAchievements: 3
      }
    }
  };

  if (status === "loading") {
    return <div className="container mx-auto px-4 py-12 text-center">ƒêang t·∫£i...</div>;
  }

  if (status === "unauthenticated") {
    return <div className="container mx-auto px-4 py-12 text-center">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem h·ªì s∆°</div>;
  }

  const renderBasicInfo = () => (
    <div className="space-y-6">
      {/* G1A: Th√¥ng tin li√™n h·ªá */}
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center gap-2">
            <FaUser className="text-blue-600" />
            G1A: Th√¥ng tin li√™n h·ªá
          </CardTitle>
          <Button size="sm" variant="outline" onClick={() => setIsEditing(!isEditing)}>
            <FaEdit className="mr-2" />
            {isEditing ? 'L∆∞u' : 'Ch·ªânh s·ª≠a'}
          </Button>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium text-gray-600">H·ªç v√† t√™n</label>
                <div className="flex items-center gap-2 mt-1">
                  <FaUser className="text-gray-400" />
                  <span className="font-medium">{profileData.basic.name}</span>
                </div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600">Email</label>
                <div className="flex items-center gap-2 mt-1">
                  <FaEnvelope className="text-gray-400" />
                  <span>{profileData.basic.email}</span>
                </div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600">S·ªë ƒëi·ªán tho·∫°i</label>
                <div className="flex items-center gap-2 mt-1">
                  <FaPhone className="text-gray-400" />
                  <span>{profileData.basic.phone}</span>
                </div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600">ƒê·ªãa ch·ªâ</label>
                <div className="flex items-center gap-2 mt-1">
                  <FaMapMarkerAlt className="text-gray-400" />
                  <span>{profileData.basic.location}</span>
                </div>
              </div>
            </div>
            <div className="space-y-4">
              <div>
                <label className="text-sm font-medium text-gray-600">Ng√†y tham gia</label>
                <div className="flex items-center gap-2 mt-1">
                  <FaCalendarAlt className="text-gray-400" />
                  <span>{profileData.basic.joinDate}</span>
                </div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600">Ho·∫°t ƒë·ªông cu·ªëi</label>
                <div className="flex items-center gap-2 mt-1">
                  <FaClock className="text-gray-400" />
                  <span>{profileData.basic.lastActive}</span>
                </div>
              </div>
              <div>
                <label className="text-sm font-medium text-gray-600">Gi·ªõi thi·ªáu</label>
                <p className="mt-1 text-gray-600">{profileData.basic.bio}</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* G1B: ·∫¢nh ƒë·∫°i di·ªán */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaCamera className="text-green-600" />
            G1B: ·∫¢nh ƒë·∫°i di·ªán
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-6">
            <div className="text-6xl">{profileData.basic.avatar}</div>
            <div className="space-y-3">
              <Button variant="outline">
                <FaCamera className="mr-2" />
                Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán
              </Button>
              <p className="text-sm text-gray-600">
                H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, PNG, GIF (T·ªëi ƒëa 5MB)
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderLearning = () => (
    <div className="space-y-6">
      {/* G2A: Kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaBook className="text-blue-600" />
            G2A: Kh√≥a h·ªçc ƒë√£ ƒëƒÉng k√Ω
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {profileData.learning.enrolledCourses.map((course) => (
              <div key={course.id} className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <h3 className="font-semibold text-blue-600">{course.name}</h3>
                    <p className="text-sm text-gray-600">{course.language}</p>
                  </div>
                  <Badge variant="outline">{course.completedLessons}/{course.totalLessons} b√†i</Badge>
                </div>
                <Progress value={course.progress} className="mb-3" />
                <div className="flex justify-between text-sm text-gray-600">
                  <span>Ti·∫øn ƒë·ªô: {course.progress}%</span>
                  <span>D·ª± ki·∫øn ho√†n th√†nh: {course.estimatedCompletion}</span>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* G2B: B√†i h·ªçc ƒë√£ l∆∞u */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaBookmark className="text-green-600" />
            G2B: B√†i h·ªçc ƒë√£ l∆∞u
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {profileData.learning.savedLessons.map((lesson) => (
              <div key={lesson.id} className="p-3 border rounded-lg hover:shadow-md transition-shadow">
                <h4 className="font-medium text-blue-600 mb-1">{lesson.title}</h4>
                <p className="text-sm text-gray-600 mb-2">{lesson.course}</p>
                <div className="flex gap-1 mb-2">
                  {lesson.tags.map((tag, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                </div>
                <div className="text-xs text-gray-500">L∆∞u: {lesson.savedDate}</div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderAchievements = () => (
    <div className="space-y-6">
      {/* G3A: Ch·ª©ng ch·ªâ */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaGraduationCap className="text-purple-600" />
            G3A: Ch·ª©ng ch·ªâ
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {profileData.achievements.certificates.map((cert) => (
              <div key={cert.id} className="p-4 border rounded-lg">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-semibold">{cert.name}</h3>
                  <Badge variant={cert.status === 'ƒêang h·ªçc' ? 'default' : 'secondary'}>
                    {cert.status}
                  </Badge>
                </div>
                <Progress value={cert.progress} className="mb-3" />
                <div className="text-sm text-gray-600">
                  Ti·∫øn ƒë·ªô: {cert.progress}%
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* G3B: ƒêi·ªÉm s·ªë */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaStar className="text-yellow-600" />
            G3B: ƒêi·ªÉm s·ªë
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {profileData.achievements.scores.map((score) => (
              <div key={score.id} className="flex items-center justify-between p-3 border rounded-lg">
                <div>
                  <div className="font-medium">{score.testName}</div>
                  <div className="text-sm text-gray-600">
                    {score.correctAnswers}/{score.totalQuestions} c√¢u ƒë√∫ng
                  </div>
                </div>
                <div className="text-right">
                  <div className="font-semibold text-green-600">{score.score}%</div>
                  <div className="text-sm text-gray-600">{score.date}</div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Huy hi·ªáu */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaTrophy className="text-orange-600" />
            Huy hi·ªáu
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {profileData.achievements.badges.map((badge) => (
              <div key={badge.id} className="text-center p-4 bg-gradient-to-br from-yellow-50 to-orange-50 rounded-lg border border-yellow-200">
                <div className="text-3xl mb-2">{badge.icon}</div>
                <h4 className="font-medium mb-1">{badge.name}</h4>
                <p className="text-sm text-gray-600 mb-2">{badge.description}</p>
                <div className="text-xs text-gray-500">ƒê·∫°t ƒë∆∞·ª£c: {badge.earnedDate}</div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderSettings = () => (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaCog className="text-gray-600" />
            G4: C√†i ƒë·∫∑t
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div>
                <div className="font-medium">Th√¥ng b√°o email</div>
                <div className="text-sm text-gray-600">Nh·∫≠n th√¥ng b√°o qua email</div>
              </div>
              <Button variant="outline" size="sm">B·∫≠t</Button>
            </div>
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div>
                <div className="font-medium">Th√¥ng b√°o push</div>
                <div className="text-sm text-gray-600">Nh·∫≠n th√¥ng b√°o tr√™n tr√¨nh duy·ªát</div>
              </div>
              <Button variant="outline" size="sm">T·∫Øt</Button>
            </div>
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div>
                <div className="font-medium">Ch·∫ø ƒë·ªô ri√™ng t∆∞</div>
                <div className="text-sm text-gray-600">Hi·ªÉn th·ªã h·ªì s∆° c√¥ng khai</div>
              </div>
              <Button variant="outline" size="sm">B·∫≠t</Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  const renderAIAnalysis = () => (
    <div className="space-y-6">
      {/* G5: AI ph√¢n t√≠ch h√†nh vi h·ªçc t·∫≠p */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaRobot className="text-purple-600" />
            G5: AI ph√¢n t√≠ch h√†nh vi h·ªçc t·∫≠p
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium mb-3">Th·ªëng k√™ h·ªçc t·∫≠p</h4>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span>T·ªïng th·ªùi gian h·ªçc:</span>
                  <span className="font-semibold">{profileData.aiAnalysis.portfolio.totalStudyHours}h</span>
                </div>
                <div className="flex justify-between">
                  <span>B√†i h·ªçc ƒë√£ ho√†n th√†nh:</span>
                  <span className="font-semibold">{profileData.aiAnalysis.portfolio.completedLessons}</span>
                </div>
                <div className="flex justify-between">
                  <span>ƒêi·ªÉm trung b√¨nh:</span>
                  <span className="font-semibold">{profileData.aiAnalysis.portfolio.averageScore}%</span>
                </div>
                <div className="flex justify-between">
                  <span>Ng√†y li√™n ti·∫øp:</span>
                  <span className="font-semibold">{profileData.aiAnalysis.portfolio.currentStreak}</span>
                </div>
              </div>
            </div>
            <div>
              <h4 className="font-medium mb-3">Ph√¢n t√≠ch h√†nh vi</h4>
              <div className="space-y-3">
                <div>
                  <div className="text-sm text-gray-600">Th·ªùi gian h·ªçc ∆∞a th√≠ch:</div>
                  <div className="font-medium">{profileData.aiAnalysis.learningBehavior.preferredTime}</div>
                </div>
                <div>
                  <div className="text-sm text-gray-600">ƒêi·ªÉm m·∫°nh:</div>
                  <div className="flex gap-1">
                    {profileData.aiAnalysis.learningBehavior.strongAreas.map((area, index) => (
                      <Badge key={index} variant="outline" className="text-xs">
                        {area}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div>
                  <div className="text-sm text-gray-600">C·∫ßn c·∫£i thi·ªán:</div>
                  <div className="flex gap-1">
                    {profileData.aiAnalysis.learningBehavior.weakAreas.map((area, index) => (
                      <Badge key={index} variant="destructive" className="text-xs">
                        {area}
                      </Badge>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* G5A: L·ªùi khuy√™n c√° nh√¢n h√≥a AI */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaLightbulb className="text-yellow-600" />
            G5A: L·ªùi khuy√™n c√° nh√¢n h√≥a AI
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {profileData.aiAnalysis.recommendations.map((rec) => (
              <div key={rec.id} className="p-3 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200">
                <div className="flex items-start gap-2">
                  <FaLightbulb className={`text-sm mt-0.5 ${
                    rec.priority === 'high' ? 'text-orange-500' : rec.priority === 'medium' ? 'text-blue-500' : 'text-green-500'
                  }`} />
                  <div className="flex-1">
                    <div className="text-sm">{rec.message}</div>
                    <div className="text-xs text-gray-600 mt-1">
                      {rec.priority === 'high' ? '∆Øu ti√™n cao' : rec.priority === 'medium' ? '∆Øu ti√™n trung b√¨nh' : 'G·ª£i √Ω'}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* G5B: Portfolio t·ª± ƒë·ªông AI */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FaDownload className="text-green-600" />
            G5B: Portfolio t·ª± ƒë·ªông AI
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <p className="text-gray-600">
              Portfolio ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông d·ª±a tr√™n ti·∫øn tr√¨nh h·ªçc t·∫≠p v√† th√†nh t√≠ch c·ªßa b·∫°n.
            </p>
            <div className="flex gap-3">
              <Button>
                <FaDownload className="mr-2" />
                T·∫£i PDF
              </Button>
              <Button variant="outline">
                <FaShare className="mr-2" />
                Chia s·∫ª
              </Button>
              <Button variant="outline">
                <FaEdit className="mr-2" />
                Ch·ªânh s·ª≠a
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">H·ªì s∆° c√° nh√¢n</h1>
        <p className="text-gray-600">Qu·∫£n l√Ω th√¥ng tin v√† theo d√µi ti·∫øn tr√¨nh h·ªçc t·∫≠p</p>
      </div>

      {/* Tab Navigation */}
      <div className="flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg">
        <Button
          variant={activeTab === 'basic' ? 'default' : 'ghost'}
          onClick={() => setActiveTab('basic')}
          className="flex-1"
        >
          <FaUser className="mr-2" />
          Th√¥ng tin c∆° b·∫£n
        </Button>
        <Button
          variant={activeTab === 'learning' ? 'default' : 'ghost'}
          onClick={() => setActiveTab('learning')}
          className="flex-1"
        >
          <FaBook className="mr-2" />
          H·ªçc t·∫≠p
        </Button>
        <Button
          variant={activeTab === 'achievements' ? 'default' : 'ghost'}
          onClick={() => setActiveTab('achievements')}
          className="flex-1"
        >
          <FaTrophy className="mr-2" />
          Th√†nh t√≠ch
        </Button>
        <Button
          variant={activeTab === 'settings' ? 'default' : 'ghost'}
          onClick={() => setActiveTab('settings')}
          className="flex-1"
        >
          <FaCog className="mr-2" />
          C√†i ƒë·∫∑t
        </Button>
        <Button
          variant={activeTab === 'ai' ? 'default' : 'ghost'}
          onClick={() => setActiveTab('ai')}
          className="flex-1"
        >
          <FaRobot className="mr-2" />
          AI Ph√¢n t√≠ch
        </Button>
      </div>

      {/* Content */}
      {activeTab === 'basic' && renderBasicInfo()}
      {activeTab === 'learning' && renderLearning()}
      {activeTab === 'achievements' && renderAchievements()}
      {activeTab === 'settings' && renderSettings()}
      {activeTab === 'ai' && renderAIAnalysis()}
    </div>
  );
}